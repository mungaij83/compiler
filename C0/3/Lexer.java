/* The following code was generated by JFlex 1.6.1 */

//Mini java lexical analyzer

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>minijava.lex</tt>
 */
class Lexer implements MiniJavaTokens {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\6\1\4\1\16\1\17\1\5\16\10\4\0\1\1\1\0"+
    "\1\14\1\0\1\7\3\0\1\62\1\63\1\2\1\55\1\51\1\56"+
    "\1\43\1\3\1\11\11\12\1\0\1\52\1\53\1\57\1\54\2\0"+
    "\13\7\1\13\6\7\1\40\1\13\6\7\1\64\1\15\1\65\1\0"+
    "\1\7\1\0\1\27\1\23\1\26\1\46\1\34\1\31\1\47\1\33"+
    "\1\25\2\7\1\24\1\42\1\36\1\37\1\21\1\7\1\44\1\30"+
    "\1\35\1\22\1\45\1\32\1\50\1\41\1\7\1\61\1\0\1\60"+
    "\1\0\6\10\1\20\32\10\2\0\4\7\4\0\1\7\2\0\1\10"+
    "\7\0\1\7\4\0\1\7\5\0\27\7\1\0\37\7\1\0\u01ca\7"+
    "\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7\21\0\160\10"+
    "\5\7\1\0\2\7\2\0\4\7\10\0\1\7\1\0\3\7\1\0"+
    "\1\7\1\0\24\7\1\0\123\7\1\0\213\7\1\0\5\10\2\0"+
    "\236\7\11\0\46\7\2\0\1\7\7\0\47\7\7\0\1\7\1\0"+
    "\55\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0"+
    "\33\7\5\0\3\7\15\0\5\10\6\0\1\7\4\0\13\10\5\0"+
    "\53\7\37\10\4\0\2\7\1\10\143\7\1\0\1\7\10\10\1\0"+
    "\6\10\2\7\2\10\1\0\4\10\2\7\12\10\3\7\2\0\1\7"+
    "\17\0\1\10\1\7\1\10\36\7\33\10\2\0\131\7\13\10\1\7"+
    "\16\0\12\10\41\7\11\10\2\7\4\0\1\7\5\0\26\7\4\10"+
    "\1\7\11\10\1\7\3\10\1\7\5\10\22\0\31\7\3\10\104\0"+
    "\1\7\1\0\13\7\67\0\33\10\1\0\4\10\66\7\3\10\1\7"+
    "\22\10\1\7\7\10\12\7\2\10\2\0\12\10\1\0\7\7\1\0"+
    "\7\7\1\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\1\7\3\0\4\7\2\0\1\10\1\7\7\10\2\0"+
    "\2\10\2\0\3\10\1\7\10\0\1\10\4\0\2\7\1\0\3\7"+
    "\2\10\2\0\12\10\4\7\7\0\1\7\5\0\3\10\1\0\6\7"+
    "\4\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7"+
    "\1\0\2\7\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10"+
    "\3\0\1\10\7\0\4\7\1\0\1\7\7\0\14\10\3\7\1\10"+
    "\13\0\3\10\1\0\11\7\1\0\3\7\1\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\5\7\2\0\1\10\1\7\10\10\1\0\3\10"+
    "\1\0\3\10\2\0\1\7\17\0\2\7\2\10\2\0\12\10\1\0"+
    "\1\7\17\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7\7\10\2\0"+
    "\2\10\2\0\3\10\10\0\2\10\4\0\2\7\1\0\3\7\2\10"+
    "\2\0\12\10\1\0\1\7\20\0\1\10\1\7\1\0\6\7\3\0"+
    "\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\3\0\3\7\3\0\14\7\4\0\5\10\3\0\3\10\1\0"+
    "\4\10\2\0\1\7\6\0\1\10\16\0\12\10\11\0\1\7\7\0"+
    "\3\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0"+
    "\5\7\3\0\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10"+
    "\1\0\2\7\6\0\2\7\2\10\2\0\12\10\22\0\2\10\1\0"+
    "\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\2\0"+
    "\1\10\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0"+
    "\1\7\1\0\2\7\2\10\2\0\12\10\1\0\2\7\17\0\2\10"+
    "\1\0\10\7\1\0\3\7\1\0\51\7\2\0\1\7\7\10\1\0"+
    "\3\10\1\0\4\10\1\7\10\0\1\10\10\0\2\7\2\10\2\0"+
    "\12\10\12\0\6\7\2\0\2\10\1\0\22\7\3\0\30\7\1\0"+
    "\11\7\1\0\1\7\2\0\7\7\3\0\1\10\4\0\6\10\1\0"+
    "\1\10\1\0\10\10\22\0\2\10\15\0\60\7\1\10\2\7\7\10"+
    "\4\0\10\7\10\10\1\0\12\10\47\0\2\7\1\0\1\7\2\0"+
    "\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0"+
    "\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\10"+
    "\2\7\6\10\1\0\2\10\1\7\2\0\5\7\1\0\1\7\1\0"+
    "\6\10\2\0\12\10\2\0\4\7\40\0\1\7\27\0\2\10\6\0"+
    "\12\10\13\0\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\7"+
    "\1\0\44\7\4\0\24\10\1\0\2\10\5\7\13\10\1\0\44\10"+
    "\11\0\1\10\71\0\53\7\24\10\1\7\12\10\6\0\6\7\4\10"+
    "\4\7\3\10\1\7\3\10\2\7\7\10\3\7\4\10\15\7\14\10"+
    "\1\7\17\10\2\0\46\7\1\0\1\7\5\0\1\7\2\0\53\7"+
    "\1\0\u014d\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7"+
    "\2\0\51\7\1\0\4\7\2\0\41\7\1\0\4\7\2\0\7\7"+
    "\1\0\1\7\1\0\4\7\2\0\17\7\1\0\71\7\1\0\4\7"+
    "\2\0\103\7\2\0\3\10\40\0\20\7\20\0\125\7\14\0\u026c\7"+
    "\2\0\21\7\1\0\32\7\5\0\113\7\3\0\3\7\17\0\15\7"+
    "\1\0\4\7\3\10\13\0\22\7\3\10\13\0\22\7\2\10\14\0"+
    "\15\7\1\0\3\7\1\0\2\10\14\0\64\7\40\10\3\0\1\7"+
    "\3\0\2\7\1\10\2\0\12\10\41\0\3\10\2\0\12\10\6\0"+
    "\130\7\10\0\51\7\1\10\1\7\5\0\106\7\12\0\35\7\3\0"+
    "\14\10\4\0\14\10\12\0\12\10\36\7\2\0\5\7\13\0\54\7"+
    "\4\0\21\10\7\7\2\10\6\0\12\10\46\0\27\7\5\10\4\0"+
    "\65\7\12\10\1\0\35\10\2\0\13\10\6\0\12\10\15\0\1\7"+
    "\130\0\5\10\57\7\21\10\7\7\4\0\12\10\21\0\11\10\14\0"+
    "\3\10\36\7\15\10\2\7\12\10\54\7\16\10\14\0\44\7\24\10"+
    "\10\0\12\10\3\0\3\7\12\10\44\7\122\0\3\10\1\0\25\10"+
    "\4\7\1\10\4\7\3\10\2\7\11\0\300\7\47\10\25\0\4\10"+
    "\u0116\7\2\0\6\7\2\0\46\7\2\0\6\7\2\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\37\7\2\0\65\7\1\0"+
    "\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0"+
    "\6\7\4\0\15\7\5\0\3\7\1\0\7\7\16\0\5\10\30\0"+
    "\1\16\1\16\5\10\20\0\2\7\23\0\1\7\13\0\5\10\5\0"+
    "\6\10\1\0\1\7\15\0\1\7\20\0\15\7\3\0\33\7\25\0"+
    "\15\10\4\0\1\10\3\0\14\10\21\0\1\7\4\0\1\7\2\0"+
    "\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0"+
    "\1\7\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0\205\7\6\0"+
    "\4\7\3\10\2\7\14\0\46\7\1\0\1\7\5\0\1\7\2\0"+
    "\70\7\7\0\1\7\17\0\1\10\27\7\11\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7"+
    "\6\10\1\0\5\7\2\0\5\7\4\0\126\7\2\0\2\10\2\0"+
    "\3\7\1\0\132\7\1\0\4\7\5\0\51\7\3\0\136\7\21\0"+
    "\33\7\65\0\20\7\u0200\0\u19b6\7\112\0\u51cd\7\63\0\u048d\7\103\0"+
    "\56\7\2\0\u010d\7\3\0\20\7\12\10\2\7\24\0\57\7\1\10"+
    "\4\0\12\10\1\0\31\7\7\0\1\10\120\7\2\10\45\0\11\7"+
    "\2\0\147\7\2\0\4\7\1\0\4\7\14\0\13\7\115\0\12\7"+
    "\1\10\3\7\1\10\4\7\1\10\27\7\5\10\20\0\1\7\7\0"+
    "\64\7\14\0\2\10\62\7\21\10\13\0\12\10\6\0\22\10\6\7"+
    "\3\0\1\7\4\0\12\10\34\7\10\10\2\0\27\7\15\10\14\0"+
    "\35\7\3\0\4\10\57\7\16\10\16\0\1\7\12\10\46\0\51\7"+
    "\16\10\11\0\3\7\1\10\10\7\2\10\2\0\12\10\6\0\27\7"+
    "\3\0\1\7\1\10\4\0\60\7\1\10\1\7\3\10\2\7\2\10"+
    "\5\7\2\10\1\7\1\10\1\7\30\0\3\7\2\0\13\7\5\10"+
    "\2\0\3\7\2\10\12\0\6\7\2\0\6\7\2\0\6\7\11\0"+
    "\7\7\1\0\7\7\221\0\43\7\10\10\1\0\2\10\2\0\12\10"+
    "\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u016e\7\2\0\152\7"+
    "\46\0\7\7\14\0\5\7\5\0\1\7\1\10\12\7\1\0\15\7"+
    "\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7"+
    "\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7\3\0\20\10"+
    "\20\0\7\10\14\0\2\7\30\0\3\7\31\0\1\7\6\0\5\7"+
    "\1\0\207\7\2\0\1\10\4\0\1\7\13\0\12\10\7\0\32\7"+
    "\4\0\1\7\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7"+
    "\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7\22\0\3\10"+
    "\4\0\14\7\1\0\32\7\1\0\23\7\1\0\2\7\1\0\17\7"+
    "\2\0\16\7\42\0\173\7\105\0\65\7\210\0\1\10\202\0\35\7"+
    "\3\0\61\7\57\0\37\7\21\0\33\7\65\0\36\7\2\0\44\7"+
    "\4\0\10\7\1\0\5\7\52\0\236\7\2\0\12\10\u0356\0\6\7"+
    "\2\0\1\7\1\0\54\7\1\0\2\7\3\0\1\7\2\0\27\7"+
    "\252\0\26\7\12\0\32\7\106\0\70\7\6\0\2\7\100\0\1\7"+
    "\3\10\1\0\2\10\5\0\4\10\4\7\1\0\3\7\1\0\33\7"+
    "\4\0\3\10\4\0\1\10\40\0\35\7\203\0\66\7\12\0\26\7"+
    "\12\0\23\7\215\0\111\7\u03b7\0\3\10\65\7\17\10\37\0\12\10"+
    "\20\0\3\10\55\7\13\10\2\0\1\10\22\0\31\7\7\0\12\10"+
    "\6\0\3\10\44\7\16\10\1\0\12\10\100\0\3\10\60\7\16\10"+
    "\4\7\13\0\12\10\u04a6\0\53\7\15\10\10\0\12\10\u0936\0\u036f\7"+
    "\221\0\143\7\u0b9d\0\u042f\7\u33d1\0\u0239\7\u04c7\0\105\7\13\0\1\7"+
    "\56\10\20\0\4\10\15\7\u4060\0\2\7\u2163\0\5\10\3\0\26\10"+
    "\2\0\7\10\36\0\4\10\224\0\3\10\u01bb\0\125\7\1\0\107\7"+
    "\1\0\2\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7"+
    "\1\0\1\7\1\0\7\7\1\0\101\7\1\0\4\7\2\0\10\7"+
    "\1\0\7\7\1\0\34\7\1\0\4\7\1\0\5\7\1\0\1\7"+
    "\3\0\7\7\1\0\u0154\7\2\0\31\7\1\0\31\7\1\0\37\7"+
    "\1\0\31\7\1\0\37\7\1\0\31\7\1\0\37\7\1\0\31\7"+
    "\1\0\37\7\1\0\31\7\1\0\10\7\2\0\62\10\u1600\0\4\7"+
    "\1\0\33\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7"+
    "\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7"+
    "\1\0\4\7\1\0\1\7\1\0\12\7\1\0\21\7\5\0\3\7"+
    "\1\0\5\7\1\0\21\7\u1144\0\ua6d7\7\51\0\u1035\7\13\0\336\7"+
    "\u3fe2\0\u021e\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\10\36\0\140\10\200\0\360\10\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\2\1\5\2\6"+
    "\1\1\13\5\1\7\2\5\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\4\1\3\0\1\25\1\0\2\5\1\26\14\5"+
    "\7\0\1\27\2\5\1\30\5\5\1\31\5\5\5\0"+
    "\1\27\5\5\1\32\1\33\2\5\1\34\1\5\1\35"+
    "\3\0\1\36\1\27\2\0\2\5\1\37\1\5\1\40"+
    "\3\5\1\0\1\41\2\0\1\42\1\5\1\43\1\44"+
    "\1\5\1\45\1\46\1\0\1\47\1\0\1\50\12\0"+
    "\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\154\0\154\0\242\0\330\0\u010e"+
    "\0\154\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\154\0\u0402"+
    "\0\u0438\0\154\0\154\0\154\0\154\0\154\0\154\0\154"+
    "\0\154\0\154\0\154\0\154\0\154\0\154\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u017a\0\154\0\u05b2\0\u05e8"+
    "\0\u061e\0\u010e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762"+
    "\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u057c\0\u0a56\0\u0a8c"+
    "\0\u010e\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u010e\0\u0bd0"+
    "\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80"+
    "\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u010e"+
    "\0\u010e\0\u0f30\0\u0f66\0\u010e\0\u0f9c\0\u010e\0\u0fd2\0\u1008"+
    "\0\u103e\0\154\0\154\0\u0dec\0\u1074\0\u10aa\0\u10e0\0\u010e"+
    "\0\u1116\0\u010e\0\u114c\0\u1182\0\u11b8\0\u11ee\0\154\0\u1224"+
    "\0\u125a\0\u010e\0\u1290\0\u010e\0\u010e\0\u12c6\0\u010e\0\154"+
    "\0\u12fc\0\u010e\0\u1332\0\154\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\4\1\7\1\4\1\10"+
    "\1\3\1\11\1\12\1\10\1\13\2\3\1\4\1\3"+
    "\1\14\1\10\1\15\1\10\1\16\1\17\1\10\1\20"+
    "\1\10\1\21\1\10\1\22\1\23\1\24\1\10\1\25"+
    "\1\10\1\26\1\27\1\30\1\31\3\10\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\3\1\4\1\5\1\6\1\4"+
    "\1\7\1\4\2\3\1\11\1\12\4\3\1\4\4\3"+
    "\1\47\4\3\1\50\2\3\1\51\1\52\5\3\1\27"+
    "\5\3\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\70\0\1\53"+
    "\1\54\66\0\1\4\70\0\5\10\4\0\23\10\1\0"+
    "\5\10\26\0\2\12\53\0\14\55\1\56\1\57\50\55"+
    "\7\0\5\10\4\0\2\10\1\60\20\10\1\0\5\10"+
    "\24\0\5\10\4\0\17\10\1\61\3\10\1\0\5\10"+
    "\24\0\5\10\4\0\11\10\1\62\4\10\1\63\4\10"+
    "\1\0\5\10\24\0\5\10\4\0\4\10\1\64\16\10"+
    "\1\0\5\10\24\0\5\10\4\0\15\10\1\65\5\10"+
    "\1\0\5\10\24\0\5\10\4\0\13\10\1\66\7\10"+
    "\1\0\5\10\24\0\5\10\4\0\4\10\1\67\16\10"+
    "\1\0\5\10\24\0\5\10\4\0\13\10\1\70\7\10"+
    "\1\0\5\10\24\0\5\10\4\0\14\10\1\71\6\10"+
    "\1\0\5\10\24\0\5\10\4\0\15\10\1\72\3\10"+
    "\1\73\1\10\1\0\5\10\24\0\5\10\4\0\7\10"+
    "\1\74\13\10\1\0\5\10\24\0\5\10\4\0\14\10"+
    "\1\75\6\10\1\0\5\10\24\0\5\10\4\0\17\10"+
    "\1\76\3\10\1\0\5\10\51\0\1\77\60\0\1\100"+
    "\106\0\1\101\61\0\1\102\21\0\2\103\1\104\63\103"+
    "\1\54\1\0\1\105\10\54\1\106\11\54\1\106\1\54"+
    "\1\106\4\54\4\106\2\54\1\106\1\54\1\106\21\54"+
    "\4\55\2\0\10\55\3\0\45\55\7\0\5\10\4\0"+
    "\3\10\1\107\17\10\1\0\5\10\24\0\5\10\4\0"+
    "\17\10\1\110\3\10\1\0\5\10\24\0\5\10\4\0"+
    "\15\10\1\111\5\10\1\0\5\10\24\0\5\10\4\0"+
    "\7\10\1\112\13\10\1\0\5\10\24\0\5\10\4\0"+
    "\7\10\1\113\13\10\1\0\5\10\24\0\5\10\4\0"+
    "\5\10\1\114\15\10\1\0\5\10\24\0\5\10\4\0"+
    "\10\10\1\115\12\10\1\0\5\10\24\0\5\10\4\0"+
    "\5\10\1\116\15\10\1\0\5\10\24\0\5\10\4\0"+
    "\12\10\1\117\10\10\1\0\5\10\24\0\5\10\4\0"+
    "\23\10\1\0\1\120\4\10\24\0\5\10\4\0\10\10"+
    "\1\121\12\10\1\0\5\10\24\0\5\10\4\0\5\10"+
    "\1\122\15\10\1\0\5\10\24\0\5\10\4\0\15\10"+
    "\1\123\5\10\1\0\5\10\24\0\5\10\4\0\5\10"+
    "\1\124\15\10\1\0\5\10\53\0\1\125\53\0\1\126"+
    "\76\0\1\127\52\0\1\130\43\0\2\103\1\131\65\103"+
    "\1\131\1\132\62\103\2\54\1\105\1\0\62\54\7\0"+
    "\5\10\4\0\4\10\1\133\16\10\1\0\5\10\24\0"+
    "\5\10\4\0\4\10\1\134\16\10\1\0\5\10\24\0"+
    "\5\10\4\0\10\10\1\135\12\10\1\0\5\10\24\0"+
    "\5\10\4\0\15\10\1\136\5\10\1\0\5\10\24\0"+
    "\5\10\4\0\4\10\1\137\16\10\1\0\5\10\24\0"+
    "\5\10\4\0\14\10\1\140\6\10\1\0\5\10\24\0"+
    "\5\10\4\0\10\10\1\141\12\10\1\0\5\10\24\0"+
    "\5\10\4\0\5\10\1\142\15\10\1\0\5\10\24\0"+
    "\5\10\4\0\15\10\1\143\5\10\1\0\5\10\24\0"+
    "\5\10\4\0\16\10\1\144\4\10\1\0\5\10\24\0"+
    "\5\10\4\0\2\10\1\145\20\10\1\0\5\10\24\0"+
    "\5\10\4\0\23\10\1\0\2\10\1\146\2\10\64\0"+
    "\1\147\46\0\1\150\71\0\1\151\65\0\1\152\31\0"+
    "\2\103\1\131\1\153\62\103\1\154\1\0\1\155\63\154"+
    "\7\0\5\10\4\0\5\10\1\156\15\10\1\0\5\10"+
    "\24\0\5\10\4\0\14\10\1\157\6\10\1\0\5\10"+
    "\24\0\5\10\4\0\10\10\1\160\12\10\1\0\5\10"+
    "\24\0\5\10\4\0\5\10\1\161\15\10\1\0\5\10"+
    "\24\0\5\10\4\0\14\10\1\162\6\10\1\0\5\10"+
    "\24\0\5\10\4\0\16\10\1\163\4\10\1\0\5\10"+
    "\24\0\5\10\4\0\14\10\1\164\6\10\1\0\5\10"+
    "\24\0\5\10\4\0\23\10\1\0\1\165\4\10\52\0"+
    "\1\166\64\0\1\167\67\0\1\170\27\0\2\154\1\171"+
    "\1\153\62\154\7\0\5\10\4\0\6\10\1\172\14\10"+
    "\1\0\5\10\24\0\5\10\4\0\7\10\1\173\13\10"+
    "\1\0\5\10\24\0\5\10\4\0\6\10\1\174\14\10"+
    "\1\0\5\10\24\0\5\10\4\0\23\10\1\0\3\10"+
    "\1\175\1\10\24\0\5\10\4\0\22\10\1\176\1\0"+
    "\5\10\24\0\5\10\4\0\16\10\1\177\4\10\1\0"+
    "\5\10\50\0\1\200\100\0\1\201\17\0\2\154\1\171"+
    "\1\0\62\154\7\0\5\10\4\0\16\10\1\202\4\10"+
    "\1\0\5\10\24\0\5\10\4\0\23\10\1\203\5\10"+
    "\45\0\1\204\74\0\1\205\50\0\1\206\100\0\1\207"+
    "\73\0\1\210\43\0\1\211\110\0\1\212\46\0\1\213"+
    "\76\0\1\214\64\0\1\215\54\0\1\216\77\0\1\217"+
    "\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5508];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\11\3\1\1\11\15\1\1\11\2\1\15\11"+
    "\4\1\3\0\1\11\1\0\17\1\7\0\17\1\5\0"+
    "\15\1\3\0\2\11\2\0\10\1\1\0\1\11\2\0"+
    "\6\1\1\11\1\0\1\1\1\0\1\11\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
StringBuffer string=new StringBuffer();
int token;
Object lexVal;

int column(){
return yycolumn;
}
int line(){
	return yyline;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2864) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                System.out.println("match: <<EOF>>");
                System.out.println("action [93] { return token=ENDINPUT; }");
                return token=ENDINPUT;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { String err=new String(yytext());"+ZZ_NL+"\t\t\t\tthrow new Error(\"Unrecognized token: \"+err); }");
            { String err=new String(yytext());
				throw new Error("Unrecognized token: "+err);
            }
          case 42: break;
          case 2: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { /*ignore spaces*/ }");
            { /*ignore spaces*/
            }
          case 43: break;
          case 3: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return token=\'*\'; }");
            { return token='*';
            }
          case 44: break;
          case 4: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { return token=\'/\'; }");
            { return token='/';
            }
          case 45: break;
          case 5: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [55] { lexVal=new String(yytext());"+ZZ_NL+"\t\t\treturn token=IDENTIFIER; }");
            { lexVal=new String(yytext());
			return token=IDENTIFIER;
            }
          case 46: break;
          case 6: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { lexVal=Integer.parseInt(yytext());"+ZZ_NL+"\t\t\t\treturn token=INTEGER_LITERAL; }");
            { lexVal=Integer.parseInt(yytext());
				return token=INTEGER_LITERAL;
            }
          case 47: break;
          case 7: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [69] { return token=\'.\'; }");
            { return token='.';
            }
          case 48: break;
          case 8: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [70] { return token=\',\'; }");
            { return token=',';
            }
          case 49: break;
          case 9: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [71] { return token=\';\' ; }");
            { return token=';' ;
            }
          case 50: break;
          case 10: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return token=\'<\'; }");
            { return token='<';
            }
          case 51: break;
          case 11: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return token=\'>\'; }");
            { return token='>';
            }
          case 52: break;
          case 12: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return token=\'+\'; }");
            { return token='+';
            }
          case 53: break;
          case 13: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [76] { return token=\'-\'; }");
            { return token='-';
            }
          case 54: break;
          case 14: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return token=\'=\'; }");
            { return token='=';
            }
          case 55: break;
          case 15: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { return token=\'}\' ; }");
            { return token='}' ;
            }
          case 56: break;
          case 16: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { return token=\'{\'; }");
            { return token='{';
            }
          case 57: break;
          case 17: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [82] { return token=\'(\'; }");
            { return token='(';
            }
          case 58: break;
          case 18: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [83] { return token=\')\'; }");
            { return token=')';
            }
          case 59: break;
          case 19: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [84] { return token=\'[\'; }");
            { return token='[';
            }
          case 60: break;
          case 20: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { return token=\']\'; }");
            { return token=']';
            }
          case 61: break;
          case 21: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [59] { string.append(yytext());"+ZZ_NL+"\t\t\t\treturn token=STRING_LITERAL; }");
            { string.append(yytext());
				return token=STRING_LITERAL;
            }
          case 62: break;
          case 22: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [38] { return token=t_if; }");
            { return token=t_if;
            }
          case 63: break;
          case 23: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [92] { /*ignore comment*/ }");
            { /*ignore comment*/
            }
          case 64: break;
          case 24: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [45] { return token=t_int; }");
            { return token=t_int;
            }
          case 65: break;
          case 25: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [41] { return token=t_new; }");
            { return token=t_new;
            }
          case 66: break;
          case 26: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [46] { return token=t_else; }");
            { return token=t_else;
            }
          case 67: break;
          case 27: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [40] { return token=t_this; }");
            { return token=t_this;
            }
          case 68: break;
          case 28: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [54] { return token=t_main; }");
            { return token=t_main;
            }
          case 69: break;
          case 29: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [47] { return token=t_void; }");
            { return token=t_void;
            }
          case 70: break;
          case 30: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { return token=t_true; }");
            { return token=t_true;
            }
          case 71: break;
          case 31: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [37] { return token=t_class; }");
            { return token=t_class;
            }
          case 72: break;
          case 32: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [39] { return token=t_while; }");
            { return token=t_while;
            }
          case 73: break;
          case 33: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [65] { return token=t_false; }");
            { return token=t_false;
            }
          case 74: break;
          case 34: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [36] { return token=t_public; }");
            { return token=t_public;
            }
          case 75: break;
          case 35: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [42] { return token=t_static; }");
            { return token=t_static;
            }
          case 76: break;
          case 36: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [49] { lexVal=new String(yytext());"+ZZ_NL+"\t\t\treturn token=t_String; }");
            { lexVal=new String(yytext());
			return token=t_String;
            }
          case 77: break;
          case 37: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [48] { return token=t_return; }");
            { return token=t_return;
            }
          case 78: break;
          case 38: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [66] { return token=length; }");
            { return token=length;
            }
          case 79: break;
          case 39: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [43] { return token=t_boolean; }");
            { return token=t_boolean;
            }
          case 80: break;
          case 40: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [67] { return token=t_extends; }");
            { return token=t_extends;
            }
          case 81: break;
          case 41: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [44] { return token=SystemOutPrintln; }");
            { return token=SystemOutPrintln;
            }
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
